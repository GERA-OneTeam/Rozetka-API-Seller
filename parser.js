#!/usr/bin/env node

import axios from 'axios';
import fs from 'fs/promises';
import path from 'path';

const BASE_URL = 'https://api-seller.rozetka.com.ua/apidoc';
const DOCS_DIR = './docs';

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∑ API
 */
async function fetchAPIData() {
  console.log('üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó API...');

  try {
    const [projectResponse, dataResponse] = await Promise.all([
      axios.get(`${BASE_URL}/api_project.json`),
      axios.get(`${BASE_URL}/api_data.json`)
    ]);

    return {
      project: projectResponse.data,
      data: dataResponse.data
    };
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ:', error.message);
    throw error;
  }
}

/**
 * –ì—Ä—É–ø—É—î endpoints –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
 */
function groupByCategory(endpoints) {
  const groups = {};

  endpoints.forEach(endpoint => {
    const group = endpoint.group || 'Other';
    if (!groups[group]) {
      groups[group] = [];
    }
    groups[group].push(endpoint);
  });

  return groups;
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç—É—î –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ Markdown
 */
function formatParameter(param) {
  const optional = param.optional ? '_(–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)_' : '**_(–æ–±–æ–≤\'—è–∑–∫–æ–≤–æ)_**';
  const type = param.type ? `\`${param.type}\`` : '';
  const description = param.description || '';

  return `- **${param.field}** ${type} ${optional} - ${description}`;
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç—É—î endpoint –≤ Markdown
 */
function formatEndpoint(endpoint) {
  let md = `### ${endpoint.title || endpoint.name}\n\n`;

  // –ú–µ—Ç–æ–¥ —Ç–∞ URL
  md += `**${endpoint.type}** \`${endpoint.url}\`\n\n`;

  // –û–ø–∏—Å
  if (endpoint.description) {
    md += `${endpoint.description}\n\n`;
  }

  // –í–µ—Ä—Å—ñ—è
  if (endpoint.version) {
    md += `**–í–µ—Ä—Å—ñ—è:** ${endpoint.version}\n\n`;
  }

  // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏
  if (endpoint.parameter?.fields) {
    md += `#### –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É\n\n`;

    Object.entries(endpoint.parameter.fields).forEach(([groupName, params]) => {
      if (groupName !== 'Parameter') {
        md += `**${groupName}:**\n\n`;
      }
      params.forEach(param => {
        md += formatParameter(param) + '\n';
      });
      md += '\n';
    });
  }

  // Header –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
  if (endpoint.header?.fields) {
    md += `#### Headers\n\n`;

    Object.entries(endpoint.header.fields).forEach(([groupName, headers]) => {
      headers.forEach(header => {
        md += formatParameter(header) + '\n';
      });
    });
    md += '\n';
  }

  // –í—ñ–¥–ø–æ–≤—ñ–¥—å
  if (endpoint.success?.fields) {
    md += `#### –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å\n\n`;

    Object.entries(endpoint.success.fields).forEach(([groupName, fields]) => {
      if (groupName !== 'Success 200') {
        md += `**${groupName}:**\n\n`;
      }
      fields.forEach(field => {
        md += formatParameter(field) + '\n';
      });
    });
    md += '\n';
  }

  // –ü—Ä–∏–∫–ª–∞–¥–∏
  if (endpoint.success?.examples) {
    md += `#### –ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ\n\n`;
    endpoint.success.examples.forEach(example => {
      md += `\`\`\`json\n${example.content}\n\`\`\`\n\n`;
    });
  }

  // –ü–æ–º–∏–ª–∫–∏
  if (endpoint.error?.fields) {
    md += `#### –ú–æ–∂–ª–∏–≤—ñ –ø–æ–º–∏–ª–∫–∏\n\n`;

    Object.entries(endpoint.error.fields).forEach(([groupName, errors]) => {
      errors.forEach(error => {
        md += formatParameter(error) + '\n';
      });
    });
    md += '\n';
  }

  md += '---\n\n';

  return md;
}

/**
 * –°—Ç–≤–æ—Ä—é—î README –∑ –ø–æ–≤–Ω–æ—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é
 */
function createMainReadme(project, groups) {
  let md = `# ${project.title || 'Rozetka Marketplace API'}\n\n`;
  md += `**–í–µ—Ä—Å—ñ—è:** ${project.version}\n\n`;
  md += `**Base URL:** \`${project.url}\`\n\n`;

  // –ó–º—ñ—Å—Ç
  md += `## –ó–º—ñ—Å—Ç\n\n`;
  Object.keys(groups).sort().forEach(group => {
    md += `- [${group}](#${group.toLowerCase().replace(/\s+/g, '-')})\n`;
  });
  md += '\n---\n\n';

  // Endpoints –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
  Object.entries(groups).sort(([a], [b]) => a.localeCompare(b)).forEach(([group, endpoints]) => {
    md += `## ${group}\n\n`;

    endpoints.forEach(endpoint => {
      md += formatEndpoint(endpoint);
    });
  });

  // –§—É—Ç–µ—Ä
  md += `\n---\n\n`;
  md += `*–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑ [Rozetka API](${BASE_URL})*\n`;
  md += `*–û—Å—Ç–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${new Date().toLocaleString('uk-UA')}*\n`;

  return md;
}

/**
 * –°—Ç–≤–æ—Ä—é—î –æ–∫—Ä–µ–º—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
 */
async function createCategoryFiles(groups) {
  const categoriesDir = path.join(DOCS_DIR, 'categories');
  await fs.mkdir(categoriesDir, { recursive: true });

  for (const [group, endpoints] of Object.entries(groups)) {
    let md = `# ${group}\n\n`;

    endpoints.forEach(endpoint => {
      md += formatEndpoint(endpoint);
    });

    const filename = `${group.toLowerCase().replace(/\s+/g, '-')}.md`;
    await fs.writeFile(path.join(categoriesDir, filename), md, 'utf-8');
    console.log(`  ‚úÖ ${filename}`);
  }
}

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
 */
async function main() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó Rozetka API\n');

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    const { project, data } = await fetchAPIData();
    console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${data.length} endpoints\n`);

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    await fs.mkdir(DOCS_DIR, { recursive: true });

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∏—Ä–∏—Ö –¥–∞–Ω–∏—Ö
    console.log('üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è JSON —Ñ–∞–π–ª—ñ–≤...');
    await fs.writeFile(
      path.join(DOCS_DIR, 'api_project.json'),
      JSON.stringify(project, null, 2),
      'utf-8'
    );
    await fs.writeFile(
      path.join(DOCS_DIR, 'api_data.json'),
      JSON.stringify(data, null, 2),
      'utf-8'
    );
    console.log('  ‚úÖ api_project.json');
    console.log('  ‚úÖ api_data.json\n');

    // –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è endpoints
    const groups = groupByCategory(data);
    console.log(`üìÇ –ó–Ω–∞–π–¥–µ–Ω–æ ${Object.keys(groups).length} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π\n`);

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ README
    console.log('üìù –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Markdown –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó...');
    const readme = createMainReadme(project, groups);
    await fs.writeFile(path.join(DOCS_DIR, 'README.md'), readme, 'utf-8');
    console.log('  ‚úÖ README.md\n');

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    console.log('üìÅ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...');
    await createCategoryFiles(groups);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    Object.entries(groups).forEach(([group, endpoints]) => {
      console.log(`  ${group}: ${endpoints.length} endpoints`);
    });

    console.log('\n‚ú® –ì–æ—Ç–æ–≤–æ! –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ –ø–∞–ø—Ü—ñ ./docs/');

  } catch (error) {
    console.error('\n‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main();
